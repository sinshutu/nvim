[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nmap <silent> <C-u><C-u> :<C-u>Denite file/rec<CR>
  nmap <silent> <C-u><C-p> :<C-u>Denite file_rec<CR>
  nmap <silent> <C-u><C-j> :<C-u>Denite line<CR>
  nmap <silent> <C-u><C-g> :<C-u>Denite grep<CR>
  nmap <silent> <C-u><C-y> :<C-u>Denite neoyank<CR>

  call denite#custom#var('file/rec', 'command',
          \ ['rg', '--files', '--vimgrep'])
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer> <C-j> j
    nnoremap <silent><buffer> <C-k> k
    nnoremap <silent><buffer><expr> <BS>    denite#do_map('move_up_path')
    nnoremap <silent><buffer><expr> <C-a>   denite#do_map('do_action', 'my_file_rec')
    nnoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-g>   denite#do_map('do_action', 'grep')
    nnoremap <silent><buffer><expr> <C-n>   denite#do_map('do_action', 'dwm_new')
    nnoremap <silent><buffer><expr> <C-x>   denite#do_map('do_action', 'quick_move')
    nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select).'j'
    nnoremap <silent><buffer><expr> <Tab>   denite#do_map('choose_action')
    nnoremap <silent><buffer><expr> a       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> p       denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q       denite#do_map('quit')
  endfunction

  " Change denite default options
  let s:denite_win_width_percent = 0.85
  let s:denite_win_height_percent = 0.7
  call denite#custom#option('default', {
      \ 'split': 'floating',
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
      \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
      \ })
'''

hook_post_source = '''
  call denite#custom#var('file_rec', 'command', ['rg', '--files', '--glob', '!.git', ''])
  call denite#custom#var('grep', 'command', ['rg'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'default_opts', ['rg', '--files', '--glob', '!.git', ''])
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
    \ 'colorscheme': 'onedark',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'readonly', 'filename', 'modified' ],
    \             [ 'lsp_info', 'lsp_hints', 'lsp_errors', 'lsp_warnings', 'lsp_ok' ],
    \             [ 'lsp_status' ] ],
    \   'right': [ [ 'lineinfo' ],
    \              [ 'percent' ],
    \              [ 'gitbranch', 'fileformat', 'fileencoding', 'filetype' ] ]
    \ },
    \ 'component_function': {
    \   'lsp_status': 'lsp#get_server_status',
    \   'gitbranch': 'FugitiveHead',
    \ },
    \ }
'''

# [[plugins]]
# repo = 'dense-analysis/ale'
# hook_add = '''
# let g:ale_linters = {
# \   'ruby': ['rubocop', 'brakeman', 'solargraph'],
# \   'css': ['stylelint'],
# \   'javascript': ['eslint', 'eslint-plugin-vue'],
# \   'markdown': ['textlint'],
# \   'python': ['pyflakes', 'pep8'],
# \   'review': ['textlint'],
# \   'tex': ['textlint'],
# \}
# let g:ale_fixers = {
# \   '*': ['remove_trailing_lines', 'trim_whitespace'],
# \   'ruby': ['rubocop'],
# \   'javascript': ['eslint'],
# \   'review': ['textlint'],
# \   'vue': ['eslint'],
# \}
# let g:ale_completion_enabled = 1
# let g:ale_statusline_format = ['E%d', 'W%d', 'ok']
# let g:ale_set_loclist = 0
# let g:ale_set_quickfix = 1
# '''

# repo = 'maximbaz/lightline-ale'
# depends = ['lightline.vim', 'ale']
# hook_add = '''
# let g:lightline.component_expand = {
#   \  'linter_checking': 'lightline#ale#checking',
#   \  'linter_warnings': 'lightline#ale#warnings',
#   \  'linter_errors': 'lightline#ale#errors',
#   \  'linter_ok': 'lightline#ale#ok',
#   \ }
# let g:lightline.component_type = {
#   \     'linter_checking': 'left',
#   \     'linter_warnings': 'warning',
#   \     'linter_errors': 'error',
#   \     'linter_ok': 'left',
#   \ }
# '''

[[plugins]]
repo = 'josa42/nvim-lightline-lsp'
depends = ['lightline.vim', 'vim-lsp']
hook_add = '''
    call lightline#lsp#register()
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
let g:lsp_settings_filetype_vue = ['typescript-language-server', 'volar-server']
nmap <silent> <space>h <Plug>(lsp-hover)
nmap <silent> <space>d <Plug>(lsp-peek-definition)
nmap <silent> <space>D <Plug>(lsp-definition)
nmap <silent> <space>t <Plug>(lsp-peek-type-definition)
nmap <silent> <space>T <Plug>(lsp-type-definition)
nmap <silent> <space>r <Plug>(lsp-references)
nmap <silent> <space>a <plug>(lsp-code-action-float)
nmap <silent> <space>rn <plug>(lsp-rename)

augroup LspEFM
  au!
  autocmd User lsp_setup call lsp#register_server({
      \ 'name': 'efm-langserver',
      \ 'cmd': {server_info->['efm-langserver']},
      \ 'allowlist': ['javascript', 'vue'],
      \ })
augroup END
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = ['vim-lsp', 'asyncomplete.vim']

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = ['vim-lsp']

# [[plugins]]
# repo = 'thomasfaingnaert/vim-lsp-neosnippet'
# depends = ['vim-lsp', 'neosnippets']

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
    map <Space>l <Plug>(easymotion-lineforward)
    map <Space>j <Plug>(easymotion-j)
    map <Space>w <Plug>(easymotion-bd-f)
    map <Space>w <Plug>(easymotion-overwin-f)
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tomtom/tcomment_vim'

# git
[[plugins]]
repo = 'rhysd/committia.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'rhysd/git-messenger.vim'

# color
[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
  let g:onedark_termcolors=256
  let g:onedark_hide_endofbuffer=1
  let g:onedark_terminal_italics=1
'''

# github copilot
[[plugins]]
repo = 'github/copilot.vim'

