[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nmap <silent> <C-u><C-u> :<C-u>Denite file_mru<CR>
  nmap <silent> <C-u><C-p> :<C-u>Denite file_rec<CR>
  nmap <silent> <C-u><C-j> :<C-u>Denite line<CR>
  nmap <silent> <C-u><C-g> :<C-u>Denite grep<CR>
  nmap <silent> <C-u><C-y> :<C-u>Denite neoyank<CR>
'''
hook_post_source = '''
  call denite#custom#var('file_rec', 'command', ['rg', '--files', '--glob', '!.git', ''])
  call denite#custom#var('grep', 'command', ['rg'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'default_opts', ['rg', '--files', '--glob', '!.git', ''])
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
source ~/.config/nvim/plugins/LanguageClient-neovim.rc.vim
'''

[[plugins]]
repo = 'Shougo/neocomplcache'
add_hook = '''
  let g:acp_enableAtStartup = 0
  let g:neocomplcache_enable_at_startup = 1
  let g:neocomplcache_enable_smart_case = 1
  let g:neocomplcache_min_syntax_length = 3
  let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : ''
  \ }
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'readonly', 'filename', 'modified' ],
    \             [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ] ],
    \   'right': [ [ 'lineinfo' ],
    \              [ 'percent' ],
    \              [ 'gitbranch', 'fileformat', 'fileencoding', 'filetype' ] ]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'fugitive#head',
    \ },
    \ }
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_add = '''
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
    map <Space>l <Plug>(easymotion-lineforward)
    map <Space>j <Plug>(easymotion-j)
    map <Space>k <Plug>(easymotion-k)
    map <Space>h <Plug>(easymotion-linebackward)
    map <Space>w <Plug>(easymotion-bd-f)
    map <Space>w <Plug>(easymotion-overwin-f)
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
vmap <Enter> <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'

# lint
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_linters = {
    \   'ruby': ['rubocop', 'brakeman', 'solargraph'],
    \   'css': ['stylelint'],
    \   'javascript': ['eslint', 'eslint-plugin-vue'],
    \   'markdown': ['textlint'],
    \   'python': ['pyflakes', 'pep8'],
    \   'review': ['textlint'],
    \   'tex': ['textlint'],
    \}
    let g:ale_fixers = {
    \   'ruby': ['rubocop'],
    \   'javascript': ['eslint'],
    \   'review': ['textlint'],
    \   'vue': ['eslint'],
    \}
    let g:ale_completion_enabled = 1
    let g:ale_statusline_format = ['E%d', 'W%d', 'ok']
    let g:ale_set_loclist = 0
    let g:ale_set_quickfix = 1
    nmap <silent> <C-n> <Plug>(ale_next_wrap)
'''

# test
[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'janko-m/vim-test'
depends = ['vim-dispatch']
hook_add = '''
let g:test#strategy = 'dispatch'
'''

# git
[[plugins]]
repo = 'rhysd/committia.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'davidpdrsn/vim-notable'
hook_add = '''
  let g:notable_notes_folder = "~/src/notable.data/notes/"
  noremap <leader>sb :call notable#open_notes_file()<cr>
'''
