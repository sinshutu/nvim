[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = {n = '<Plug>'}
hook_add = '''
    nmap <silent> <Leader>r <Plug>(quickrun)
    let g:quickrun_config = get(g:, 'quickrun_config', {})
    let g:quickrun_config._ = {
          \ 'runner'    : 'vimproc',
          \ 'runner/vimproc/updatetime' : 60,
          \ 'outputter' : 'error',
          \ 'outputter/error/success' : 'buffer',
          \ 'outputter/error/error'   : 'quickfix',
          \ 'outputter/buffer/split'  : ':rightbelow 8sp',
          \ 'outputter/buffer/close_on_empty' : 1,
          \ }
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertCharPre'
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_delay = 200
  let g:deoplete#auto_complete_start_length = 1
  let g:deoplete#enable_camel_case = 0
  let g:deoplete#enable_ignore_case = 0
  let g:deoplete#enable_refresh_always = 0
  let g:deoplete#enable_smart_case = 1
  let g:deoplete#file#enable_buffer_path = 1
  let g:deoplete#max_list = 10000
  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  let g:neosnippet#snippets_directory = '~/.config/nvim/repo/github.com/Shougo/neosnippet-snippets/neosnippets,~/.config/nvim/snippets/'
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
on_i  = 1

[[plugins]]
repo = 'Shougo/context_filetype.vim'

# html
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = 'html'

# python
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = '[python,cython]'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = '[python,cython]'

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = '[python,cython]'

# golang
# [[plugins]]
# repo = 'fatih/vim-go'
# on_ft = 'go'
# hook_add = '''
# set rtp+=/home/suzuki/src/github.com/nsf/gocode/vim
# '''

# javascript
# [[plugins]]
# repo = 'pangloss/vim-javascript'
# on_ft = 'javascript'

# typescript
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

# haskell
# [[plugins]]
# repo = 'neovimhaskell/haskell-vim'
# on_ft = 'haskell'
#
# [[plugins]]
# repo = 'ujihisa/neco-ghc'
# on_ft = 'haskell'
# hook_add = '''
#   let g:haskellmode_completion_ghc = 0
#   autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
# '''
#
# [[plugins]]
# repo = 'itchyny/vim-haskell-indent'
# on_ft = 'haskell'

# ruby
# [[plugins]]
# repo = 'osyo-manga/vim-monster'
# on_ft = 'ruby'

# [[plugins]]
# repo = 'vim-rails'
# on_ft = '[ruby]'

# rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'

[[plugins]]
repo = 'sebastianmarkow/deoplete-rust'
on_ft = 'rust'

# vue
[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['js', 'vue']

[[plugins]]
repo = 'Quramy/tsuquyomi'
on_ft = ['js', 'vue']

[[plugins]]
repo = 'Quramy/tsuquyomi-vue'
on_ft = ['js', 'vue']

# json syntax
[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_add = '''
    let g:vim_json_syntax_conceal = 0
'''

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

# markdown
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown','md']
hook_add = '''
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_math = 1
'''

# terraform
[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['tf']
hook_add = '''
    let g:terraform_align=1
'''
